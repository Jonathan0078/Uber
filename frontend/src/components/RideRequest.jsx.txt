
import React, { useState } from 'react';
import { Button } from '@/components/ui/button.jsx';
import { Input } from '@/components/ui/input.jsx';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card.jsx';
import { MapPin, Navigation, Clock } from 'lucide-react';

const RideRequest = ({ user, onRideCreated }) => {
  const [origin, setOrigin] = useState('');
  const [destination, setDestination] = useState('');
  const [loading, setLoading] = useState(false);
  const [geocoding, setGeocoding] = useState(false);
  const [originSuggestions, setOriginSuggestions] = useState([]);
  const [destinationSuggestions, setDestinationSuggestions] = useState([]);

  // API Base URL
  const getApiBase = () => {
    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
      return 'http://localhost:5000/api';
    }
    if (window.location.hostname.includes('replit.dev') || window.location.hostname.includes('replit.app')) {
      return `https://${window.location.hostname}/api`;
    }
    if (window.location.hostname.includes('github.io')) {
      return 'https://JonathanOliveira.pythonanywhere.com/api';
    }
    return 'https://JonathanOliveira.pythonanywhere.com/api';
  };

  const API_BASE = getApiBase();

  const getCurrentLocation = () => {
    return new Promise((resolve, reject) => {
      if (!navigator.geolocation) {
        reject(new Error('Geolocalização não suportada'));
        return;
      }

      navigator.geolocation.getCurrentPosition(
        (position) => {
          resolve({
            latitude: position.coords.latitude,
            longitude: position.coords.longitude
          });
        },
        (error) => {
          reject(error);
        },
        {
          enableHighAccuracy: true,
          timeout: 10000,
          maximumAge: 60000
        }
      );
    });
  };

  const reverseGeocode = async (latitude, longitude) => {
    try {
      const response = await fetch(`${API_BASE}/reverse-geocode`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ latitude, longitude }),
      });

      if (response.ok) {
        const data = await response.json();
        return data.display_name;
      }
      return null;
    } catch (error) {
      console.error('Erro na geocodificação reversa:', error);
      return null;
    }
  };

  const useCurrentLocationAsOrigin = async () => {
    setGeocoding(true);
    try {
      const location = await getCurrentLocation();
      const address = await reverseGeocode(location.latitude, location.longitude);
      if (address) {
        setOrigin(address);
      } else {
        setOrigin(`${location.latitude.toFixed(6)}, ${location.longitude.toFixed(6)}`);
      }
    } catch (error) {
      console.error('Erro ao obter localização:', error);
      alert('Não foi possível obter sua localização');
    } finally {
      setGeocoding(false);
    }
  };

  const createRide = async () => {
    if (!origin.trim() || !destination.trim()) {
      alert('Por favor, preencha origem e destino');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch(`${API_BASE}/rides`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          passenger_id: user.id,
          origin: origin.trim(),
          destination: destination.trim()
        }),
      });

      if (response.ok) {
        const ride = await response.json();
        setOrigin('');
        setDestination('');
        if (onRideCreated) {
          onRideCreated(ride);
        }
        alert('Corrida solicitada com sucesso!');
      } else {
        const error = await response.json();
        alert(`Erro: ${error.error}`);
      }
    } catch (error) {
      console.error('Erro ao criar corrida:', error);
      alert('Erro ao solicitar corrida');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Navigation className="h-5 w-5" />
          Solicitar Corrida
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <label className="text-sm font-medium">Origem</label>
          <div className="flex gap-2">
            <Input
              placeholder="Digite o endereço de origem..."
              value={origin}
              onChange={(e) => setOrigin(e.target.value)}
              className="flex-1"
            />
            <Button
              variant="outline"
              size="sm"
              onClick={useCurrentLocationAsOrigin}
              disabled={geocoding}
              title="Usar localização atual"
            >
              {geocoding ? (
                <Clock className="h-4 w-4 animate-spin" />
              ) : (
                <MapPin className="h-4 w-4" />
              )}
            </Button>
          </div>
        </div>

        <div className="space-y-2">
          <label className="text-sm font-medium">Destino</label>
          <Input
            placeholder="Digite o endereço de destino..."
            value={destination}
            onChange={(e) => setDestination(e.target.value)}
          />
        </div>

        <Button
          onClick={createRide}
          disabled={loading || !origin.trim() || !destination.trim()}
          className="w-full"
        >
          {loading ? (
            <>
              <Clock className="h-4 w-4 mr-2 animate-spin" />
              Processando...
            </>
          ) : (
            <>
              <Navigation className="h-4 w-4 mr-2" />
              Solicitar Corrida
            </>
          )}
        </Button>
      </CardContent>
    </Card>
  );
};

export default RideRequest;
