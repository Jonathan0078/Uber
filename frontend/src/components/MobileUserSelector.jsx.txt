import React, { useState, useEffect } from 'react';
import { User, Car, Plus, ArrowRight } from 'lucide-react';
import '../styles/mobile-native.css';

const MobileUserSelector = ({ onUserSelect }) => {
  const [users, setUsers] = useState([]);
  const [newUser, setNewUser] = useState({ username: '', email: '', user_type: 'passenger' });
  const [loading, setLoading] = useState(false);
  const [showForm, setShowForm] = useState(false);

  // API Base URL
  const getApiBase = () => {
    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
      return 'http://localhost:5000/api';
    }
    if (window.location.hostname.includes('replit.dev') || window.location.hostname.includes('replit.app')) {
      return `https://${window.location.hostname}/api`;
    }
    if (window.location.hostname.includes('github.io')) {
      return 'https://JonathanOliveira.pythonanywhere.com/api';
    }
    return 'https://JonathanOliveira.pythonanywhere.com/api';
  };

  const API_BASE = getApiBase();

  useEffect(() => {
    fetchUsers();
  }, []);

  const fetchUsers = async () => {
    try {
      const response = await fetch(`${API_BASE}/users`);
      if (response.ok) {
        const data = await response.json();
        setUsers(data);
      }
    } catch (error) {
      console.error('Erro ao buscar usuários:', error);
      // Para GitHub Pages, usar dados mock se API não estiver disponível
      if (window.location.hostname !== 'localhost') {
        setUsers([]);
      }
    }
  };

  const createUser = async () => {
    if (!newUser.username || !newUser.email) {
      alert("Por favor, preencha nome e email");
      return;
    }

    // Check for existing user of the same type
    const existingUserOfType = users.find(user => user.user_type === newUser.user_type);
    if (existingUserOfType) {
      alert(`Já existe um usuário do tipo ${newUser.user_type === 'passenger' ? 'Passageiro' : 'Motorista'} neste dispositivo. Por favor, selecione-o ou descadastre-o antes de criar um novo.`);
      return;
    }

    setLoading(true);
    try {
      const response = await fetch(`${API_BASE}/users`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newUser),
      });

      if (response.ok) {
        const user = await response.json();
        setUsers([...users, user]);
        setNewUser({ username: '', email: '', user_type: 'passenger' });
        setShowForm(false);
        alert('Usuário criado com sucesso!');
      } else {
        const error = await response.json();
        alert(`Erro: ${error.error}`);
      }
    } catch (error) {
      console.error('Erro ao criar usuário:', error);
      // Para GitHub Pages, simular criação local
      if (window.location.hostname !== 'localhost') {
        const mockUser = {
          id: Date.now(),
          ...newUser,
          is_available: newUser.user_type === 'driver' ? false : null
        };
        setUsers([...users, mockUser]);
        setNewUser({ username: '', email: '', user_type: 'passenger' });
        setShowForm(false);
        alert('Usuário criado com sucesso! (Modo demonstração)');
      } else {
        alert('Erro ao criar usuário');
      }
    } finally {
      setLoading(false);
    }
  };

  const deleteUser = async (userId) => {
    if (!confirm('Tem certeza que deseja excluir este usuário? Esta ação não pode ser desfeita.')) {
      return;
    }

    try {
      const response = await fetch(`${API_BASE}/users/${userId}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        setUsers(users.filter(user => user.id !== userId));
        alert('Usuário excluído com sucesso!');
      } else {
        alert('Erro ao excluir usuário');
      }
    } catch (error) {
      console.error('Erro ao excluir usuário:', error);
      // Remover localmente se API não estiver disponível
      setUsers(users.filter(user => user.id !== userId));
      alert('Usuário excluído localmente');
    }
  };

  const getUserInitials = (name) => {
    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);
  };

  return (
    <div className="mobile-container">
      {/* Header */}
      <div className="mobile-header">
        <h1>Uber App</h1>
        <button 
          className="mobile-button-secondary"
          style={{ width: 'auto', padding: '8px 16px', fontSize: '14px' }}
          onClick={() => setShowForm(!showForm)}
        >
          <Plus size={16} />
        </button>
      </div>

      {/* Conteúdo */}
      <div className="mobile-content">
        {/* Título de boas-vindas */}
        <div style={{ textAlign: 'center', marginBottom: '24px' }}>
          <h2 style={{ 
            fontSize: '28px', 
            fontWeight: '700', 
            color: 'var(--text-primary)', 
            margin: '0 0 8px 0' 
          }}>
            Bem-vindo
          </h2>
          <p style={{ 
            fontSize: '16px', 
            color: 'var(--text-secondary)', 
            margin: 0 
          }}>
            Selecione ou crie um usuário para continuar
          </p>
        </div>

        {/* Formulário de criação (condicional) */}
        {showForm && (
          <div className="mobile-form slide-up">
            <h3 style={{ 
              fontSize: '18px', 
              fontWeight: '600', 
              margin: '0 0 16px 0',
              color: 'var(--text-primary)'
            }}>
              Criar Novo Usuário
            </h3>

            <div className="form-group">
              <label className="form-label">Nome</label>
              <input
                className="mobile-input"
                placeholder="Seu nome"
                value={newUser.username}
                onChange={(e) => setNewUser({ ...newUser, username: e.target.value })}
              />
            </div>

            <div className="form-group">
              <label className="form-label">Email</label>
              <input
                className="mobile-input"
                type="email"
                placeholder="seu@email.com"
                value={newUser.email}
                onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}
              />
            </div>

            <div className="form-group">
              <label className="form-label">Tipo de Usuário</label>
              <div className="user-type-toggle">
                <button
                  className={`toggle-option ${newUser.user_type === 'passenger' ? 'active' : ''}`}
                  onClick={() => setNewUser({ ...newUser, user_type: 'passenger' })}
                >
                  <User size={16} />
                  Passageiro
                </button>
                <button
                  className={`toggle-option ${newUser.user_type === 'driver' ? 'active' : ''}`}
                  onClick={() => setNewUser({ ...newUser, user_type: 'driver' })}
                >
                  <Car size={16} />
                  Motorista
                </button>
              </div>
            </div>

            <button 
              className={`mobile-button ${loading ? 'loading' : ''}`}
              onClick={createUser} 
              disabled={loading || !newUser.username || !newUser.email}
            >
              {loading ? 'Criando...' : 'Criar Usuário'}
            </button>
          </div>
        )}

        {/* Lista de usuários */}
        <div className="mobile-card">
          <h3 style={{ 
            fontSize: '18px', 
            fontWeight: '600', 
            margin: '0 0 16px 0',
            color: 'var(--text-primary)'
          }}>
            {users.length === 0 ? 'Nenhum usuário encontrado' : 'Usuários Existentes'}
          </h3>

          {users.length === 0 ? (
            <div style={{ 
              textAlign: 'center', 
              padding: '40px 20px',
              color: 'var(--text-secondary)'
            }}>
              <User size={48} style={{ margin: '0 auto 16px', opacity: 0.3 }} />
              <p style={{ margin: 0, fontSize: '16px' }}>
                Crie o primeiro usuário para começar
              </p>
            </div>
          ) : (
            <div className="user-grid">
              {users.map((user) => (
                <div className="user-item" key={user.id}>
                    <div className="user-avatar">
                      {user.user_type === 'passenger' ? <User size={24} /> : <Car size={24} />}
                    </div>
                    <div className="user-info" onClick={() => onUserSelect(user)} style={{ flex: 1, cursor: 'pointer' }}>
                      <h4 className="user-name">{user.username}</h4>
                      <p className="user-email">{user.email}</p>
                      <p className="user-type">{user.user_type === 'passenger' ? 'Passageiro' : 'Motorista'}</p>
                    </div>
                    <button 
                      onClick={(e) => {
                        e.stopPropagation();
                        deleteUser(user.id);
                      }}
                      style={{
                        background: '#EF4444',
                        color: 'white',
                        border: 'none',
                        borderRadius: '8px',
                        padding: '8px 12px',
                        fontSize: '12px',
                        cursor: 'pointer',
                        marginLeft: '8px'
                      }}
                    >
                      Excluir
                    </button>
                    <ArrowRight size={20} style={{ color: 'var(--text-secondary)', marginLeft: '8px' }} />
                  </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default MobileUserSelector;